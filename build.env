#!/usr/bin/env bash
# PURPOSE:  Generate some variables for GCP/GKE. This file is called with one
#           argument while sourcing it in.
# -----------------------------------------------------------------------------
#    EXEC:  source build.env <prod|stage>
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Check for arguments
if [[ "$#" -lt 1 ]]; then
    echo "Bro, where's my first argument: stage or prod?"
    return
fi

set -x

# -----------------------------------------------------------------------------
# Client Truths
export TF_VAR_envBuild="$1"
# gcloud config configurations list
export myProject='infras-gke'
# this is also the 'Organization'; gcloud organizations list
export dns_zone='ttest.info.'
export TF_VAR_dns_name="${myProject}"
export TF_VAR_dns_zone="${dns_zone}"
# Either stand-alone or high-availability: <sa|ha>
export vaultDeployType='ha'
# Set Organization variables
# gcloud organizations list
export TF_VAR_org_id='899709558505'
# gcloud beta billing accounts list
export TF_VAR_billing_account='01D77C-F12E30-A9CDE8'
export gcpProviderVersion='4.70.0'

# -----------------------------------------------------------------------------
# Set Project variables

# gcloud config list --format 'value(compute.region)'
export TF_VAR_region='us-west2'

# gcloud config list --format 'value(compute.zone)'
export TF_VAR_zone="${TF_VAR_region}-a"

#export TF_VAR_envBucketPrefix="env/${TF_VAR_envBuild}"
#export newClusterENV="${TF_VAR_project}-${TF_VAR_envBuild}"  # FIXME / delete?

# -----------------------------------------------------------------------------
# Set Security variables, if any
#export certDir="$(pwd)/secrets/certs"
#export certConf='./secrets/config'
#export vaultCert="$certDir/ca.pem"

# -----------------------------------------------------------------------------
# Environmental Considerations
# Terraform Constants
case "$TF_VAR_envBuild" in
    stage)
        export TF_VAR_project_id="${myProject}-${TF_VAR_envBuild}"
        export TF_VAR_cluster_apps="${TF_VAR_project_id}"
        #export TF_VAR_cluster_vault="vault-${TF_VAR_project_id}"
        export TF_VAR_envBucket="tfstate-${TF_VAR_project_id}"
        #export VAULT_ADDR="https://vault-${TF_VAR_envBuild}.${dns_zone:0:-1}"
        export TF_VAR_minDistSize='3'
        #export TF_VAR_kubeNode_type='n1-standard-1'
        export TF_VAR_kubeNode_type='n1-standard-1'
        ;;
    prod)
        export TF_VAR_project_id="$myProject"
        export TF_VAR_cluster_apps="${TF_VAR_project_id}"
        #export TF_VAR_cluster_vault="vault-${TF_VAR_project_id}"
        export TF_VAR_envBucket="tfstate-${myProject}"
        #export VAULT_ADDR="https://vault.${dns_zone:0:-1}"
        export TF_VAR_minDistSize='3'
        export TF_VAR_kubeNode_type='n1-standard-1'
        ;;
    *)  echo "$TF_VAR_envBuild is unsupported; exiting."
        ;;
esac


# -----------------------------------------------------------------------------
# Vault Stuff
#export svcAcctName='vault-iam'
#export serviceEmail="${svcAcctName}@${TF_VAR_project_id}.iam.gserviceaccount.com"
#export svcAcctDesc='Service Account for Vault/GCP-IAM Auth Method'
#export svcAcctDispName="${svcAcctName}-auth-method"
#export serviceAccount="serviceAccount:${serviceEmail}"
#export svcAcctCreds="/var/tmp/${svcAcctName}-${TF_VAR_project_id}.json"
#export vaultStuff='/var/tmp/vault-stuff.env'
#export buildStuff='./ztuff'                     # Dont commit this directory
#export KUBECONFIG="$buildStuff/config"
set +x


###----------------------------------------------------------------------------
### Change TF backend prefix with ENV change: <stage|prod>
###---
scripts/setup/set-tf-backend.sh


###----------------------------------------------------------------------------
### Setup KUBECONFIG directory if it's not already
###---
#if [[ ! -d "$buildStuff" ]]; then
#    mkdir "$buildStuff"
#    touch "$KUBECONFIG"
#fi
